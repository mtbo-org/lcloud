plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'org.mtbo.lcloud'
version = '3.1.2-M6'

java {
    withJavadocJar()
    withSourcesJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

configurations {
    mockitoAgent
}

configurations.configureEach {
    exclude module: 'slf4j-jdk14'
    exclude module: 'netty-handler'
    exclude module: 'netty-common'
    exclude module: 'netty-transport-native-epoll'
    exclude module: 'netty-resolver-dns-native-macos'
}

apply plugin: 'java-library'

dependencies {
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    compileOnly "io.netty:netty-handler:4.2.1.Final"
    compileOnly "io.netty:netty-common:4.2.1.Final"
    compileOnly "io.projectreactor:reactor-core:$reactorVersion"
    compileOnly "org.postgresql:r2dbc-postgresql:$r2dbcPostgresVersion"
    compileOnly "org.springframework.data:spring-data-r2dbc:$r2dbcVersion"

    testImplementation "org.springframework.data:spring-data-r2dbc:$r2dbcVersion"
    testImplementation "io.projectreactor:reactor-test:$reactorVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation platform("org.junit:junit-bom:$junitVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
    testRuntimeOnly "io.r2dbc:r2dbc-h2:1.0.0.RELEASE"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    mockitoAgent("org.mockito:mockito-core:$mockitoVersion") {
        transitive = false
    }

}

tasks {
    test {
        jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
    }
}

publishing {
    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }


    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'LCloud'
                description = 'Lightweight java implementation of cloud discovery usoing postgres'
                url = 'https://github.com/mtbo-org/lcloud'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://github.com/mtbo-org/lcloud/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'PROGrand'
                        name = 'Vladimir E. Koltunov'
                        email = 'progrand@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/mtbo-org/lcloud.git'
                    developerConnection = 'scm:git:git@github.com:mtbo-org/lcloud.git'
                    url = 'https://github.com/mtbo-org/lcloud'
                }
            }
        }
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

}

tasks.named('test') {
    useJUnitPlatform()
}
